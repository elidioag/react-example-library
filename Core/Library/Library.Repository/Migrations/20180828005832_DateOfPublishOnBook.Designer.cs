// <auto-generated />
using System;
using Library.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Library.Repository.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20180828005832_DateOfPublishOnBook")]
    partial class DateOfPublishOnBook
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Library.Domain.Entities.AuthorBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("2bacdfed-a0d4-4c01-a25a-a3182fe7fc78"));

                    b.Property<Guid>("AuthorId");

                    b.Property<Guid>("BookId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorsBooks");
                });

            modelBuilder.Entity("Library.Domain.Entities.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("25262572-f864-425b-957e-5d2cc08d1b6b"));

                    b.Property<string>("Code");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PublishierId");

                    b.HasKey("Id");

                    b.HasIndex("PublishierId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("58f5fa74-6305-4e57-8a04-1132aa321b62"));

                    b.Property<Guid>("BookId");

                    b.Property<int>("Category");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookCategoryEntity");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("4b649073-443b-4eff-ba84-5cff0ebb144e"));

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<Guid?>("PublishierId");

                    b.HasKey("Id");

                    b.HasIndex("PublishierId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.PublishierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("010f8922-7cdd-4025-82fa-d2384105c4a3"));

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Publishiers");
                });

            modelBuilder.Entity("Library.Domain.Entities.AuthorBookEntity", b =>
                {
                    b.HasOne("Library.Domain.Entities.AuthorEntity", "Author")
                        .WithMany("BooksAuthor")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Domain.Entities.BookEntity", "Book")
                        .WithMany("AuthorsBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Domain.Entities.AuthorEntity", b =>
                {
                    b.HasOne("Library.Domain.Entities.PublishierEntity", "Publishier")
                        .WithMany("Authors")
                        .HasForeignKey("PublishierId");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCategoryEntity", b =>
                {
                    b.HasOne("Library.Domain.Entities.BookEntity", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Domain.Entities.BookEntity", b =>
                {
                    b.HasOne("Library.Domain.Entities.PublishierEntity", "Publishier")
                        .WithMany("PublishedBooks")
                        .HasForeignKey("PublishierId");
                });
#pragma warning restore 612, 618
        }
    }
}
